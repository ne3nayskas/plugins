(function () {
    'use strict';

    function startPlugin() {
        window.plugin_surs_ready = true;

        var SourceTMDB = function (parent) {
            this.network = new Lampa.Reguest();
            this.discovery = false;

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ URL –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            function buildApiUrl(baseUrl, options) {
                options = options || {};
                
                // –§—ñ–ª—å—Ç—Ä –ø–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ–ª–æ—Å—ñ–≤
                baseUrl += '&vote_count.gte=50';
                
                // –§—ñ–ª—å—Ç—Ä –ø–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
                baseUrl += '&vote_average.gte=6.5';
                
                // –í–∏–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ —Ç–∞ –∞–∑—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                var excludedKeywords = [
                    '210024', // –ê–Ω—ñ–º–µ
                    '13141',  // –ú–∞–Ω–≥–∞
                    '345822', // 4-–∫–æ–º–∞ –º–∞–Ω–≥–∞
                    '315535', // –î–æ–Ω—Ö—É–∞
                    '290667', // –ú–∞–Ω—å—Ö—É–∞
                    '323477', // –ú–∞–Ω—Ö–≤–∞
                    '290609', // –ö–æ—Ä–µ–π—Å—å–∫–∞ –º–∞–Ω—Ö–≤–∞
                    '207317', // –•–µ–Ω—Ç–∞–π
                    '346488', // –†–æ—Å—ñ–π—Å—å–∫–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞
                    '158718'  // –†–æ—Å—ñ–π—Å—å–∫–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞
                ];
                baseUrl += '&without_keywords=' + excludedKeywords.join(',');
                
                // –í–∏–∫–ª—é—á–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω
                baseUrl += '&without_origin_country=RU&without_origin_country=JP&without_origin_country=KR&without_origin_country=CN';
                
                // –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É - —ñ–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                if (options.ukrainian) {
                    baseUrl += '&with_origin_country=UA';
                    // –ú–µ–Ω—à —Å—Ç—Ä–æ–≥—ñ –≤–∏–º–æ–≥–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                    baseUrl = baseUrl.replace('vote_count.gte=50', 'vote_count.gte=10');
                    baseUrl = baseUrl.replace('vote_average.gte=6.5', 'vote_average.gte=5.0');
                }
                
                // –§—ñ–ª—å—Ç—Ä —è–∫–æ—Å—Ç—ñ
                baseUrl += '&with_images=true';
                
                return baseUrl;
            }

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
            function filterContent(item, options) {
                options = options || {};
                
                // –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É - –º–µ–Ω—à —Å—Ç—Ä–æ–≥—ñ –≤–∏–º–æ–≥–∏
                var minRating = options.ukrainian ? 5.0 : 6.5;
                var minVotes = options.ukrainian ? 10 : 50;
                
                // –§—ñ–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                if ((item.vote_average || 0) < minRating) return false;
                
                // –§—ñ–ª—å—Ç—Ä –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ–ª–æ—Å—ñ–≤
                if ((item.vote_count || 0) < minVotes) return false;
                
                // –í–∏–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Ç–∞ –∞–∑—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
                var excludedLanguages = ['ru', 'ja', 'ko', 'zh', 'th', 'vi', 'hi'];
                if (excludedLanguages.includes(item.original_language)) return false;
                
                // –í–∏–∫–ª—é—á–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è
                if (item.origin_country) {
                    var excludedCountries = ['RU', 'JP', 'KR', 'CN', 'TW', 'HK', 'TH', 'VN', 'IN'];
                    if (item.origin_country.some(function(country) { return excludedCountries.includes(country); })) {
                        return false;
                    }
                }
                
                // –§—ñ–ª—å—Ç—Ä –ø–æ —è–∫–æ—Å—Ç—ñ - –º–∞—î –±—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä
                if (!item.poster_path) return false;
                
                // –§—ñ–ª—å—Ç—Ä –ø–æ —Ä–æ–∫—É - –Ω–µ —Å—Ç–∞—Ä—ñ—à—ñ 1970 —Ä–æ–∫—É
                var releaseYear = item.release_date ? parseInt(item.release_date.substring(0, 4)) : 
                                 item.first_air_date ? parseInt(item.first_air_date.substring(0, 4)) : 0;
                if (releaseYear < 1970) return false;
                
                return true;
            }

            this.main = function () {
                var owner = this;
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var onComplete = arguments.length > 1 ? arguments[1] : undefined;
                var onError = arguments.length > 2 ? arguments[2] : undefined;
                var partsLimit = 12;

                var partsData = [
                    function (callback) {
                        var json = {
                            title: '',
                            results: [],
                            small: true,
                            collection: true,
                            line_type: 'player-cards'
                        };
                        callback(json);
                    },
                    function (callback) {
                        // –¢—Ä–µ–Ω–¥–∏ —Ç–∏–∂–Ω—è (–±–µ–∑ —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É)
                        var baseUrl = 'trending/all/week';
                        baseUrl = buildApiUrl(baseUrl);
                        owner.get(baseUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                });
                            }
                            json.title = 'üî• –¢—Ä–µ–Ω–¥–∏ —Ç–∏–∂–Ω—è';
                            callback(json);
                        }, callback);
                    },
                    function (callback) {
                        // –¢–æ–ø —Ñ—ñ–ª—å–º–∏ –∑–∞ –≤–µ—Å—å —á–∞—Å
                        var baseUrl = 'discover/movie?sort_by=vote_average.desc&vote_count.gte=1000';
                        baseUrl = buildApiUrl(baseUrl);
                        owner.get(baseUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 20);
                            }
                            json.title = 'üèÜ –ù–∞–π–∫—Ä–∞—â—ñ —Ñ—ñ–ª—å–º–∏ —É—Å—ñ—Ö —á–∞—Å—ñ–≤';
                            callback(json);
                        }, callback);
                    }
                ];

                var CustomData = [];

                // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–±—ñ—Ä–∫–∏
                function getUkrainianContent(type, title) {
                    return function (callback) {
                        var apiUrl = 'discover/' + type + '?sort_by=popularity.desc&with_origin_country=UA';
                        apiUrl = buildApiUrl(apiUrl, {ukrainian: true});

                        owner.get(apiUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item, {ukrainian: true});
                                }).slice(0, 20);
                            }
                            json.title = title;
                            callback(json);
                        }, callback);
                    };
                }

                // –î–æ–¥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–±—ñ—Ä–∫–∏
                CustomData.push(getUkrainianContent('movie', 'üé¨ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ñ—ñ–ª—å–º–∏'));
                CustomData.push(getUkrainianContent('tv', 'üì∫ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–µ—Ä—ñ–∞–ª–∏'));

                // –¢–æ–ø —Å–µ—Ä—ñ–∞–ª–∏ –∑–∞ –≤–µ—Å—å —á–∞—Å
                function getTopTVShows() {
                    return function (callback) {
                        var baseUrl = 'discover/tv?sort_by=vote_average.desc&vote_count.gte=500';
                        baseUrl = buildApiUrl(baseUrl);
                        owner.get(baseUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 20);
                            }
                            json.title = 'üèÜ –ù–∞–π–∫—Ä–∞—â—ñ —Å–µ—Ä—ñ–∞–ª–∏';
                            callback(json);
                        }, callback);
                    };
                }

                CustomData.push(getTopTVShows());

                // –ù–æ–≤–∏–Ω–∫–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤)
                function getNewReleases(type, title) {
                    return function (callback) {
                        var currentDate = new Date();
                        var sixMonthsAgo = new Date();
                        sixMonthsAgo.setMonth(currentDate.getMonth() - 6);
                        
                        var dateField = type === 'movie' ? 'primary_release_date' : 'first_air_date';
                        var apiUrl = 'discover/' + type + '?sort_by=popularity.desc&' + 
                                    dateField + '.gte=' + sixMonthsAgo.toISOString().split('T')[0] + 
                                    '&' + dateField + '.lte=' + currentDate.toISOString().split('T')[0];
                        apiUrl = buildApiUrl(apiUrl);

                        owner.get(apiUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 15);
                            }
                            json.title = title;
                            callback(json);
                        }, callback);
                    };
                }

                CustomData.push(getNewReleases('movie', 'üéâ –ù–æ–≤—ñ —Ñ—ñ–ª—å–º–∏'));
                CustomData.push(getNewReleases('tv', 'üéâ –ù–æ–≤—ñ —Å–µ—Ä—ñ–∞–ª–∏'));

                // –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º–∏ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è
                function getAnimation() {
                    return function (callback) {
                        var apiUrl = 'discover/movie?with_genres=16&sort_by=vote_average.desc&vote_count.gte=200';
                        apiUrl = buildApiUrl(apiUrl);
                        owner.get(apiUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 15);
                            }
                            json.title = 'üê≠ –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º–∏ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è';
                            callback(json);
                        }, callback);
                    };
                }

                CustomData.push(getAnimation());

                // –î—Ä–∞–º–∞—Ç–∏—á–Ω—ñ —Å–µ—Ä—ñ–∞–ª–∏
                function getDramaTV() {
                    return function (callback) {
                        var apiUrl = 'discover/tv?with_genres=18&sort_by=popularity.desc';
                        apiUrl = buildApiUrl(apiUrl);
                        owner.get(apiUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 15);
                            }
                            json.title = 'üé≠ –î—Ä–∞–º–∞—Ç–∏—á–Ω—ñ —Å–µ—Ä—ñ–∞–ª–∏';
                            callback(json);
                        }, callback);
                    };
                }

                CustomData.push(getDramaTV());

                // –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —Ç–∞ —Ñ–µ–Ω—Ç–µ–∑—ñ
                function getSciFiFantasy() {
                    return function (callback) {
                        var apiUrl = 'discover/movie?with_genres=878,14&sort_by=popularity.desc';
                        apiUrl = buildApiUrl(apiUrl);
                        owner.get(apiUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 15);
                            }
                            json.title = 'üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —Ç–∞ —Ñ–µ–Ω—Ç–µ–∑—ñ';
                            callback(json);
                        }, callback);
                    };
                }

                CustomData.push(getSciFiFantasy());

                // –ö–æ–º–µ–¥—ñ—ó
                function getComedies() {
                    return function (callback) {
                        var apiUrl = 'discover/movie?with_genres=35&sort_by=popularity.desc';
                        apiUrl = buildApiUrl(apiUrl);
                        owner.get(apiUrl, params, function (json) {
                            if (json.results) {
                                json.results = json.results.filter(function(item) {
                                    return filterContent(item);
                                }).slice(0, 15);
                            }
                            json.title = 'üòÇ –ö–æ–º–µ–¥—ñ—ó';
                            callback(json);
                        }, callback);
                    };
                }

                CustomData.push(getComedies());

                // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø—ñ–¥–±—ñ—Ä–∫–∏
                function shuffleArray(array) {
                    for (var i = array.length - 1; i > 0; i--) {
                        var j = Math.floor(Math.random() * (i + 1));
                        var temp = array[i];
                        array[i] = array[j];
                        array[j] = temp;
                    }
                }

                shuffleArray(CustomData);

                var combinedData = partsData.concat(CustomData);

                function loadPart(partLoaded, partEmpty) {
                    Lampa.Api.partNext(combinedData, partsLimit, partLoaded, partEmpty);
                }

                loadPart(onComplete, onError);
                return loadPart;
            };
        };

        function add() {
            if (typeof Lampa === 'undefined' || !Lampa.Storage || !Lampa.Api || !Lampa.Params) {
                console.log('Lampa API not available');
                return;
            }

            if (!Lampa.Api.sources || !Lampa.Api.sources.tmdb) {
                console.log('TMDB source not available');
                return;
            }

            var sourceName = 'SURS';

            function assign(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (source) {
                        for (var key in source) {
                            if (Object.prototype.hasOwnProperty.call(source, key)) {
                                target[key] = source[key];
                            }
                        }
                    }
                }
                return target;
            }

            try {
                var surs_mod = assign({}, Lampa.Api.sources.tmdb, new SourceTMDB(Lampa.Api.sources.tmdb));
                Lampa.Api.sources[sourceName] = surs_mod;

                var newSourceOptions = {};
                newSourceOptions[sourceName] = sourceName;

                var mergedOptions = assign({}, Lampa.Params.values['source'], newSourceOptions);
                Lampa.Params.select('source', mergedOptions, 'tmdb');
                
                console.log('SURS plugin successfully added');
            } catch (e) {
                console.error('Error adding SURS plugin: ', e);
            }
        }

        // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –≤—Å—ñ—Ö –º–æ–≤
        Lampa.Lang.add({
            surs_title_trend_week: {
                ru: "–¢—Ä–µ–Ω–¥—ã –Ω–µ–¥–µ–ª–∏",
                en: "Trending This Week", 
                uk: "–¢—Ä–µ–Ω–¥–∏ —Ç–∏–∂–Ω—è"
            },
            surs_top_movies: {
                ru: "–õ—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã",
                en: "Top Movies",
                uk: "–ù–∞–π–∫—Ä–∞—â—ñ —Ñ—ñ–ª—å–º–∏"
            },
            surs_top_tv: {
                ru: "–õ—É—á—à–∏–µ —Å–µ—Ä–∏–∞–ª—ã", 
                en: "Top TV Shows",
                uk: "–ù–∞–π–∫—Ä–∞—â—ñ —Å–µ—Ä—ñ–∞–ª–∏"
            }
        });

        if (window.appready) {
            console.log('App ready, adding SURS plugin');
            add();
        } else {
            console.log('Waiting for app ready');
            Lampa.Listener.follow('app', function (e) {
                if (e.type == 'ready') {
                    console.log('App ready event received, adding SURS plugin');
                    add();
                }
            });
        }
    }

    if (!window.plugin_surs_ready) {
        console.log('Starting SURS plugin');
        startPlugin();
    }

})();
